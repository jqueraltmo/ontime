hosc freq offset = unipolar $ sin $ [-1,0,1]*offset+unipolar fx*freq;
hoscp freq offset = unipolar $ sin $ [-1,0,1]*offset+:unipolar fx*freq;

__shape_a = xyt [fy,fx];
__shape_r sides = 2*pi/sides;
__shape_c sides = floor (0.5+__shape_a / (__shape_r sides)) *: (__shape_r sides);
__shape_d sides = cos (__shape_c sides - __shape_a) * fr;
__star_d sides = abs $ sin (__shape_c sides - __shape_a)*fr;
shape sides radius smoothing = 1-(smoothstep {radius/2, radius/2+smoothing/2+0.0000001} $ __shape_d sides);
shapep sides radius smoothing = 1-(smoothstepp {radius/2, radius/2+:smoothing/2+0.0000001} $ __shape_d sides);

star sides radius smoothing = 1-(smoothstep {radius/2, radius/2+smoothing/2+0.0000001} $ __shape_d sides+:3*__star_d sides);
starp sides radius smoothing = 1-(smoothstepp {radius/2, radius/2+:smoothing/2+0.0000001} $ __shape_d sides+:3*__star_d sides);
stard sides smoothing deepness = 1-(smoothstep {0.5, 0.5+smoothing/2+0.0000001} $ __shape_d sides+:deepness*__star_d sides);
stardp sides smoothing deepness = 1-(smoothstepp {0.5, 0.5+smoothing/2+0.0000001} $ __shape_d sides+:deepness*:__star_d sides);

__kaleid n = abs $ (ft % (2*pi/n))-:pi/n;
kaleid nSides = setfxy (fr*{cos $ __kaleid nSides, sin $ __kaleid nSides});

pixelate xy = setfxy $ (0.5+floor (fxy*:(xy/2)))/:(xy/2);

posterize bins gamma gr = ((floor $ gr ** gamma * bins)/:bins)**:(1/:gamma);

posterizep bins gamma gr = ((floor $ gr **: gamma *: bins)/:bins)**:(1/:gamma);

colorama amount p = fract $ hsvrgb $ amount+:rgbhsv p;

hadd amount p1 p2 = p1+:p2*:amount;
hsub amount p1 p2 = p1-:p2*:amount;
hblend amount p1 p2 = p1*:(1-:amount)+:p2*:amount;

{-
dot x y = mono $ x*:y;
__luma threshold tolerance gr = smoothstep [threshold-(tolerance+0.0000001), threshold+(tolerance+0.0000001)] $ dot gr {0.2125,0.7154,0.0721};
luma threshold tolerance gr = [gr++1]*(__luma threshold tolerance gr);

float a = smoothstep(threshold-(tolerance+0.0000001), threshold+(tolerance+0.0000001), _luminance(_c0.rgb));
   return vec4(_c0.rgb*a, a);`

float _luminance(vec3 rgb){
     const vec3 W = vec3(0.2125, 0.7154, 0.0721);
     return dot(rgb, W);
}
-}
